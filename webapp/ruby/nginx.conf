# this sets the user nginx will run as, 
#and the number of worker processes
user nginx; 
worker_processes  32; # no of cpu cores

# setup where nginx will log errors to 
# and where the nginx process id resides
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
  # set to on if you have more than 1 worker_processes 
  accept_mutex off;
}

http {
  include       /etc/nginx/mime.types;

  default_type application/octet-stream;
  access_log /tmp/nginx.access.log combined;
 
  # use the kernel sendfile
  sendfile        on;
  # prepend http headers before sendfile() 
  tcp_nopush     on; # on にすべき

  tcp_nodelay        on; # on でいいのか？ on for keepalive?

  # keepalive_timeout  5; # 0 で keepalive 無効. isucon2 ではこのデフォルト値が罠に
  # keepalive_requests 100;

  gzip  on; # gzip 圧縮. cpu を食うトレードオフ. クライアントによってはおかしくなることがあったと思う
  gzip_vary on;
  gzip_min_length 500;
  
  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_types text/plain text/xml text/css
     text/comma-separated-values
     text/javascript application/x-javascript
     application/atom+xml image/x-icon;

  # use the socket we configured in our unicorn.rb
  # http://wiki.nginx.org/HttpUpstreamModule
  upstream unicorn_server {
    server unix:/home/game/gitrepos/isucon2/webapp/ruby/tmp/sockets/unicorn.sock
        fail_timeout=0; # 休み時間なし
        # max_fails=2 fail_timeout=10; # ２回失敗したら10分休み. For load balancing
  }

  # configure the virtual host
  server {
    # replace with your domain name
    # server_name my-sinatra-app.com;
    # replace this with your static Sinatra app files, root + public 
    root /home/game/gitrepos/isucon2/webapp/ruby/public;
    # port to listen for requests on
    listen 80;
    # maximum accepted body size of client request 
    client_max_body_size 4G;
    # the server will close connections after this time 
    # keepalive_timeout 5;

    location / {
      try_files $uri @app;
    }

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      # pass to the upstream unicorn server mentioned above 
      proxy_pass http://unicorn_server;
    }
  }
}
